package ctu.cit;

import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.HttpHeaders;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jws;
import io.jsonwebtoken.JwtException;
import io.jsonwebtoken.Jwts;

import java.util.Base64;

import javax.json.Json;
import javax.json.JsonObject;
import javax.json.JsonObjectBuilder;
import javax.json.JsonValue;

@Path("/profiles")
public class ProfileRespone {

    private UserResponsitory repository = new UserResponsitory();

    @GET
    @Produces(MediaType.APPLICATION_JSON)
    public Response showProfile(@Context HttpHeaders headers) {
        String token = headers.getHeaderString("Authorization");

        if (token == null || !isValidToken(token)) {
            JsonObject jsonError = Json.createObjectBuilder()
                .add("error", "Unauthorized access")
                .build();
            return Response.status(Response.Status.UNAUTHORIZED).entity(jsonError).build();
        }

        String userEmail = extractEmailFromToken(token);

        User user = repository.getUserByEmail(userEmail);

        if (user == null) {
            JsonObject jsonError = Json.createObjectBuilder()
                    .add("error", "User not found")
                    .add("message", "User with the provided email does not exist."+userEmail)
                    .build();
            return Response.status(Response.Status.NOT_FOUND).entity(jsonError).build();
        }


        Profile profile = repository.getProfileByUserId(user.getId());

        if (profile == null) {
            JsonObject jsonError = Json.createObjectBuilder()
                .add("error", "Profile not found")
                .build();
            return Response.status(Response.Status.NOT_FOUND).entity(jsonError).build();
        }

        JsonObject jsonResponse = Json.createObjectBuilder()
            .add("üë§ Name", profile.getName())
            .add("üìù Title", profile.getTitle())
            // Add other profile fields as needed
            .build();

        return Response.ok(jsonResponse).build();
    }

    private boolean isValidToken(String token) {
        // Implement your token validation logic here
        return true; // For demonstration purposes, assuming token is always valid
    }

    private String extractEmailFromToken(String token) {
        // Token format: Bearer <token_string>
        // Assuming token format is "Bearer <token_string>"
        if (token != null && token.startsWith("Bearer ")) {
            // Extract the token string by removing "Bearer " prefix
            String tokenString = token.substring(7).trim();

            try {
                // Parse the token
                Jws<Claims> claims = Jwts.parser().setSigningKey("your-secret-key").parseClaimsJws(tokenString);

                // Extract email from the parsed claims
                String email = claims.getBody().getSubject();
                return email;
            } catch (Exception e) {
                // Handle token parsing exception
                e.printStackTrace(); // Or log the exception
                return null; // Return null if unable to extract email
            }
        }

        // If token format is invalid or null, return null
        return null;
    }
    
 // Ph∆∞∆°ng th·ª©c POST ƒë·ªÉ c·∫≠p nh·∫≠t th√¥ng tin profile
    @POST
    @Consumes(MediaType.APPLICATION_JSON)
    public Response updateProfile(@Context HttpHeaders headers, Profile updatedProfile) {
        // L·∫•y token t·ª´ header
        String token = headers.getHeaderString("Authorization");

        // Ki·ªÉm tra xem token c√≥ t·ªìn t·∫°i kh√¥ng
        if (token == null || token.isEmpty()) {
            JsonObject jsonError = Json.createObjectBuilder()
                    .add("error", "Token is missing")
                    .build();
            return Response.status(Response.Status.UNAUTHORIZED).entity(jsonError).build();
        }

        // L·∫•y ID c·ªßa ng∆∞·ªùi d√πng t·ª´ token
        int userId = getUserIdFromToken(token);

        // Ki·ªÉm tra xem ID c·ªßa ng∆∞·ªùi d√πng c√≥ h·ª£p l·ªá kh√¥ng
        if (userId == -1) {
            JsonObject jsonError = Json.createObjectBuilder()
                    .add("error", "Invalid token")
                    .build();
            return Response.status(Response.Status.UNAUTHORIZED).entity(jsonError).build();
        }

        // Ki·ªÉm tra xem profile c√≥ t·ªìn t·∫°i kh√¥ng
        Profile existingProfile = repository.getProfileByUserId(userId);

        if (existingProfile == null) {
            JsonObject jsonError = Json.createObjectBuilder()
                    .add("error", "Profile not found for user ID: " + userId)
                    .build();
            return Response.status(Response.Status.NOT_FOUND).entity(jsonError).build();
        }

        // C·∫≠p nh·∫≠t th√¥ng tin profile
        existingProfile.setName(updatedProfile.getName());
        existingProfile.setTitle(updatedProfile.getTitle());
        existingProfile.setPhone(updatedProfile.getPhone());
        existingProfile.setEmail(updatedProfile.getEmail());
        existingProfile.setBirthday(updatedProfile.getBirthday());
        existingProfile.setImage(updatedProfile.getImage());
        existingProfile.setGender(updatedProfile.getGender());
        existingProfile.setLocation(updatedProfile.getLocation());
        existingProfile.setWebsite(updatedProfile.getWebsite());

        // L∆∞u profile ƒë∆∞·ª£c c·∫≠p nh·∫≠t v√†o c∆° s·ªü d·ªØ li·ªáu
        repository.updateProfile(existingProfile);

        JsonObject jsonResponse = Json.createObjectBuilder()
                .add("message", "Profile updated successfully")
                .add("profile", Json.createObjectBuilder()
                        .add("id", existingProfile.getId())
                        .add("name", existingProfile.getName())
                        .add("title", existingProfile.getTitle())
                        .add("phone", existingProfile.getPhone())
                        .add("email", existingProfile.getEmail())
                        .add("birthday", existingProfile.getBirthday().toString())
                        .add("image", existingProfile.getImage())
                        .add("gender", existingProfile.getGender())
                        .add("location", existingProfile.getLocation())
                        .add("website", existingProfile.getWebsite()))
                .build();

        return Response.ok().entity(jsonResponse).build();
    }

    // H√†m l·∫•y ID c·ªßa ng∆∞·ªùi d√πng t·ª´ token
    private int getUserIdFromToken(String token) {
        if (token == null || !token.startsWith("Bearer ")) {
            System.out.println("Token is null or does not start with 'Bearer '");
            return -1;
        }

        String tokenString = token.substring(7).trim();

        try {
            Jws<Claims> claims = Jwts.parser()
                                     .setSigningKey("your-secret-key")
                                     .parseClaimsJws(tokenString);
            String userIdStr = claims.getBody().getSubject();
            return Integer.parseInt(userIdStr);
        } catch (JwtException e) {
            System.out.println("JWT parsing failed: " + e.getMessage());
        } catch (NumberFormatException e) {
            System.out.println("Failed to parse user ID from token: " + e.getMessage());
        }

        return -1;
    }
    

        public static void main(String[] args) {
            String token = "yeyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqb-G6pWRzYWhzMnNuQGV4YW1wbGUuY29tIn0.G2-Et5Nit9ZKkZZIa1pjNBsL08re7vzir9TkJQDpveU"; // Thay th·∫ø chu·ªói n√†y b·∫±ng token JWT th·ª±c t·∫ø c·ªßa b·∫°n

            // T√°ch chu·ªói token th√†nh c√°c ph·∫ßn: header, payload v√† signature
            String[] parts = token.split("\\.");

            // Decode payload t·ª´ Base64 v·ªÅ chu·ªói
            String payload = new String(Base64.getUrlDecoder().decode(parts[1]));

            // Hi·ªÉn th·ªã th√¥ng tin payload
            System.out.println("Decoded Payload:");
            System.out.println(payload);
        }
    
    
}
