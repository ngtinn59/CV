package ctu.cit;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class UserResponsitory {

    Connection conn = null;

    public UserResponsitory() {
        String user_name = "postgres";
        String password = "123";
        try {
            Class.forName("org.postgresql.Driver");
            conn = DriverManager.getConnection("jdbc:postgresql://localhost:5432/cse", user_name, password);
            System.out.println("Ket noi thanh cong!");
        } catch (Exception e) {
            System.out.println("Kết nối đến cơ sở dữ liệu thất bại: " + e.getMessage());
        }
    }

    public void insertUser(User user) {
        String sql = "INSERT INTO users1 (name, password, title, about, phone, email, linkedin_url) VALUES (?, ?, ?, ?, ?, ?, ?)";
        try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, user.getName());
            pstmt.setString(2, user.getPassword());
            pstmt.setString(3, user.getTitle());
            pstmt.setString(4, user.getAbout());
            pstmt.setString(5, user.getPhone());
            pstmt.setString(6, user.getEmail());
            pstmt.setString(7, user.getLinkedin_url());

            int rowsAffected = pstmt.executeUpdate();
            if (rowsAffected > 0) {
                System.out.println("Người dùng được thêm vào cơ sở dữ liệu thành công!");
            } else {
                System.out.println("Thêm người dùng vào cơ sở dữ liệu không thành công!");
            }
        } catch (SQLException e) {
            System.out.println("Lỗi khi thêm người dùng vào cơ sở dữ liệu: " + e.getMessage());
        }
    }
    
    public void insertProfile(Profile profile) {
        String sql = "INSERT INTO profiles (users_id, name, title, phone, email, birthday, image, gender, location, website) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1, profile.getId());
            pstmt.setString(2, profile.getName());
            pstmt.setString(3, profile.getTitle());
            pstmt.setString(4, profile.getPhone());
            pstmt.setString(5, profile.getEmail());
            pstmt.setDate(6, profile.getBirthday());
            pstmt.setString(7, profile.getImage());
            pstmt.setBoolean(8, profile.getGender());
            pstmt.setString(9, profile.getLocation());
            pstmt.setString(10, profile.getWebsite());

            int rowsAffected = pstmt.executeUpdate();
            if (rowsAffected > 0) {
                System.out.println("Profile inserted successfully!");
            } else {
                System.out.println("Failed to insert profile!");
            }
        } catch (SQLException e) {
            System.out.println("Error inserting profile: " + e.getMessage());
        }
    }
    public static void main(String[] args) {
        UserResponsitory repository = new UserResponsitory();

        // Tạo một đối tượng User mới
        User newUser = new User();
        newUser.setName("John Doe");
        newUser.setPassword("password123");
        newUser.setTitle("Software Engineer");
        newUser.setAbout("I am a software engineer with 5 years of experience.");
        newUser.setPhone("1234567890");
        newUser.setEmail("john@example.com");
        newUser.setLinkedin_url("http://linkedin.com/in/johndoe");

        // Insert người dùng mới vào cơ sở dữ liệu
        repository.insertUser(newUser);
    }

    public User getUserByEmail(String email) {
        String sql = "SELECT * FROM users1 WHERE email = ?";
        try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, email);
            try (ResultSet rs = pstmt.executeQuery()) {
                if (rs.next()) {
                    User user = new User();
                    user.setId(rs.getInt("id"));
                    user.setName(rs.getString("name"));
                    user.setPassword(rs.getString("password"));
                    user.setTitle(rs.getString("title"));
                    user.setAbout(rs.getString("about"));
                    user.setPhone(rs.getString("phone"));
                    user.setEmail(rs.getString("email"));
                    user.setLinkedin_url(rs.getString("linkedin_url"));
                    return user;
                }
            }
        } catch (SQLException e) {
            System.out.println("Lỗi khi lấy thông tin người dùng: " + e.getMessage());
        }
        return null;
    }

    
}
