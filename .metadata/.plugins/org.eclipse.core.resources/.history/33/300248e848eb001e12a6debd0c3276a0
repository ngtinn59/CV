package ctu.cit;

import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.HttpHeaders;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jws;
import io.jsonwebtoken.Jwts;

import javax.json.Json;
import javax.json.JsonObject;
import javax.json.JsonObjectBuilder;
import javax.json.JsonValue;

@Path("/profiles")
public class ProfileRespone {

    private UserResponsitory repository = new UserResponsitory();

    @GET
    @Produces(MediaType.APPLICATION_JSON)
    public Response showProfile(@Context HttpHeaders headers) {
        String token = headers.getHeaderString("Authorization");

        if (token == null || !isValidToken(token)) {
            JsonObject jsonError = Json.createObjectBuilder()
                .add("error", "Unauthorized access")
                .build();
            return Response.status(Response.Status.UNAUTHORIZED).entity(jsonError).build();
        }

        String userEmail = extractEmailFromToken(token);

        User user = repository.getUserByEmail(userEmail);

        if (user == null) {
            JsonObject jsonError = Json.createObjectBuilder()
                    .add("error", "User not found")
                    .add("message", "User with the provided email does not exist."+userEmail)
                    .build();
            return Response.status(Response.Status.NOT_FOUND).entity(jsonError).build();
        }


        Profile profile = repository.getProfileByUserId(user.getId());

        if (profile == null) {
            JsonObject jsonError = Json.createObjectBuilder()
                .add("error", "Profile not found")
                .build();
            return Response.status(Response.Status.NOT_FOUND).entity(jsonError).build();
        }

        JsonObject jsonResponse = Json.createObjectBuilder()
            .add("üë§ Name", profile.getName())
            .add("üìù Title", profile.getTitle())
            // Add other profile fields as needed
            .build();

        return Response.ok(jsonResponse).build();
    }

    private boolean isValidToken(String token) {
        // Implement your token validation logic here
        return true; // For demonstration purposes, assuming token is always valid
    }

    private String extractEmailFromToken(String token) {
        // Token format: Bearer <token_string>
        // Assuming token format is "Bearer <token_string>"
        if (token != null && token.startsWith("Bearer ")) {
            // Extract the token string by removing "Bearer " prefix
            String tokenString = token.substring(7).trim();

            try {
                // Parse the token
                Jws<Claims> claims = Jwts.parser().setSigningKey("your-secret-key").parseClaimsJws(tokenString);

                // Extract email from the parsed claims
                String email = claims.getBody().getSubject();
                return email;
            } catch (Exception e) {
                // Handle token parsing exception
                e.printStackTrace(); // Or log the exception
                return null; // Return null if unable to extract email
            }
        }

        // If token format is invalid or null, return null
        return null;
    }
    
 // Ph∆∞∆°ng th·ª©c POST ƒë·ªÉ c·∫≠p nh·∫≠t th√¥ng tin profile
    @POST
    @Consumes(MediaType.APPLICATION_JSON)
    public Response updateProfile(Profile updatedProfile) {
      // Ensure that the updatedProfile object contains an ID
      if (updatedProfile.getId() == null) {
        JsonObject jsonError = Json.createObjectBuilder()
            .add("error", "Missing profile ID")
            .build();
        return Response.status(Response.Status.BAD_REQUEST).entity(jsonError).build();
      }

      // Check if the profile exists
      Profile existingProfile = repository.getProfileByUserId(updatedProfile.getId());
      if (existingProfile == null) {
        JsonObject jsonError = Json.createObjectBuilder()
            .add("error", "Profile not found for ID: " + updatedProfile.getId())
            .build();
        return Response.status(Response.Status.NOT_FOUND).entity(jsonError).build();
      }

      // Update the profile information
      // ... (rest of the update logic)

      // Save the updated profile to the database
      // ... (rest of the save logic)

      // Construct the response
      JsonObject jsonResponse = Json.createObjectBuilder()
          .add("message", "Profile updated successfully")
          .add("profile", Json.createObjectBuilder()
              .add("id", existingProfile.getId())
              // ... (rest of the profile fields)
          )
          .build();

      return Response.ok().entity(jsonResponse).build();
    }
}

