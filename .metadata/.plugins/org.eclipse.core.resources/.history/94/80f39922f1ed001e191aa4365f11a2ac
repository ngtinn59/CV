package ctu.cit;


import javax.ws.rs.HeaderParam;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.json.Json;
import javax.json.JsonObject;
import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.PUT;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.HttpHeaders;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

@Path("/projects")
public class ProjectRespone {
    private ProjectRepository repository = new ProjectRepository();

    // GET all projects
    @GET
    @Produces(MediaType.APPLICATION_JSON)
    public Response getProjects() {
		return null;
        // Implement your logic to retrieve all projects from the repository
        // and return a JSON response
    }

    // GET a project by ID
    @GET
    @Path("/{id}")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getProjectById(@PathParam("id") String id) {
		return null;
        // Implement your logic to retrieve a project by ID from the repository
        // and return a JSON response
    }

    // POST a new project
    @POST
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public Response createProject(@Context HttpHeaders headers, Projects newProject) {
        String token = headers.getHeaderString("Authorization");

        if (token == null || !isValidToken(token)) {
            JsonObject jsonError = Json.createObjectBuilder()
                    .add("error", "Unauthorized access")
                    .build();
            return Response.status(Response.Status.UNAUTHORIZED).entity(jsonError).build();
        }

        // Optional: Extract user details from the token if needed
        String userEmail = extractEmailFromToken(token);
        // Assuming you have a method to validate user's email
        if (!validateUserByEmail(userEmail)) {
            JsonObject jsonError = Json.createObjectBuilder()
                    .add("error", "Invalid user")
                    .build();
            return Response.status(Response.Status.FORBIDDEN).entity(jsonError).build();
        }

        // Validate the input project object
        if (!validateProject(newProject)) {
            JsonObject jsonError = Json.createObjectBuilder()
                    .add("error", "Invalid project data")
                    .build();
            return Response.status(Response.Status.BAD_REQUEST).entity(jsonError).build();
        }

        // Insert the project into the repository
        Projects createdProject = repository.createProject(newProject);
        if (createdProject == null) {
            JsonObject jsonError = Json.createObjectBuilder()
                    .add("error", "Failed to create a new project")
                    .build();
            return Response.status(Response.Status.INTERNAL_SERVER_ERROR).entity(jsonError).build();
        }

        // Prepare the response object
        JsonObject projectJson = Json.createObjectBuilder()
                .add("id", createdProject.getId()) // assuming the project has an ID field
                .add("name", createdProject.getName()) // and other relevant fields
                // ... add other project details
                .build();

        JsonObject jsonResponse = Json.createObjectBuilder()
                .add("success", true)
                .add("message", "Project created successfully")
                .add("project", projectJson)
                .build();

        return Response.status(Response.Status.CREATED).entity(jsonResponse).build();
    }

    private boolean validateUserByEmail(String userEmail) {
		// TODO Auto-generated method stub
		return false;
	}

	private boolean isValidToken(String token) {
        // Implement your token validation logic here
        return true; // For demonstration purposes, assuming token is always valid
    }

    private boolean validateProject(Project project) {
        // Implement your project validation logic here
        // For example, check if the project name is not empty
        return project.getName() != null && !project.getName().trim().isEmpty();
    }

    private String extractEmailFromToken(String token) {
        // Similar to the method in ProfileResponse, extract the email
        // This assumes the token is a JWT containing the user's email
        // ...
        return null;
    }

    // PUT (update) a project by ID
    @PUT
    @Path("/{id}")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public Response updateProject(@Context HttpHeaders headers, @PathParam("id") String id, Projects updatedProject) {
		return null;
        // Implement your logic to update an existing project by ID using the provided data
        // and return a JSON response
    }

    // DELETE a project by ID
    @DELETE
    @Path("/{id}")
    @Produces(MediaType.APPLICATION_JSON)
    public Response deleteProject(@PathParam("id") String id) {
		return null;
        // Implement your logic to delete a project by ID from the repository
        // and return a JSON response
    }
}