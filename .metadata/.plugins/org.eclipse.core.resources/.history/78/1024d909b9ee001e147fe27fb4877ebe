package ctu.cit;

import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class EducationRepository {

    Connection conn = null;

    public EducationRepository() {
        String user_name = "postgres";
        String password = "123";
        try {
            Class.forName("org.postgresql.Driver");
            conn = DriverManager.getConnection("jdbc:postgresql://localhost:5432/cse", user_name, password);
            System.out.println("Ket noi thanh cong!");
        } catch (Exception e) {
            System.out.println("Káº¿t ná»‘i Ä‘áº¿n cÆ¡ sá»Ÿ dá»¯ liá»‡u tháº¥t báº¡i: " + e.getMessage());
        }
    }

    public Education insertEducation(Education education, int profilesId) {
        String sql = "INSERT INTO public.educations(\r\n" + 
                "degree, institution, additionaldetail, start_date, end_date, profiles_id)\r\n" + 
                "VALUES (?, ?, ?, ?, ?, ?)" +
                "RETURNING id"; // Trả về chỉ ID thay vì tất cả các trường

        try (PreparedStatement pstmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            pstmt.setString(1, education.getDegree());
            pstmt.setString(2, education.getInstitution());
            pstmt.setString(3, education.getAdditionalDetail());
            pstmt.setString(4, education.getStartDate()); // Chuyển đổi từ java.util.Date sang java.sql.Date
            pstmt.setString(5, education.getEndDate()); // Chuyển đổi từ java.util.Date sang java.sql.Date
            pstmt.setInt(6, profilesId);

            int affectedRows = pstmt.executeUpdate();
            if (affectedRows == 0) {
                throw new SQLException("Insertion failed, no rows affected.");
            }

            try (ResultSet rs = pstmt.getGeneratedKeys()) {
                if (rs.next()) {
                    int id = rs.getInt(1);
                    education.setId(id);
                    return education;
                } else {
                    throw new SQLException("Insertion failed, no ID obtained.");
                }
            }
        } catch (SQLException e) {
            System.out.println("Error while inserting education into the database: " + e.getMessage());
            return null;
        }
    }

    public List<Education> getAllEducationByProfileId(int profileId) {
        List<Education> educations = new ArrayList<>();
        
        String sql = "SELECT * FROM public.educations WHERE profiles_id = ?";
        try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1, profileId);
            try (ResultSet rs = pstmt.executeQuery()) {
                while (rs.next()) {
                    Education education = new Education();
                    education.setId(rs.getInt("id"));
                    education.setDegree(rs.getString("degree"));
                    education.setInstitution(rs.getString("institution"));
                    education.setStartDate(rs.getString("start_date"));
                    education.setEndDate(rs.getString("end_date"));
                    education.setAdditionalDetail(rs.getString("additionaldetail"));
                    
                    educations.add(education);
                }
            }
        } catch (SQLException e) {
            System.out.println("Error while retrieving educations from the database: " + e.getMessage());
        }
        
        return educations;
    }

    public Education getEducationById(int educationId, int profileId) {
        Education education = null;
        
        String sql = "SELECT id, degree, institution, additionaldetail, start_date, end_date " +
                     "FROM public.educations WHERE id = ? AND profiles_id = ?";
        try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1, educationId);
            pstmt.setInt(2, profileId);
            try (ResultSet rs = pstmt.executeQuery()) {
                if (rs.next()) {
                    education = new Education();
                    education.setId(rs.getInt("id"));
                    education.setDegree(rs.getString("degree"));
                    education.setInstitution(rs.getString("institution"));
                    education.setAdditionalDetail(rs.getString("additionaldetail"));
                    education.setStartDate(rs.getString("start_date"));
                    education.setEndDate(rs.getString("end_date"));
                }
            }
        } catch (SQLException e) {
            System.out.println("Error while retrieving education from the database: " + e.getMessage());
        }
        
        return education;
    }

  
    public static void main(String[] args) {
        // Tạo một đối tượng EducationRepository
        EducationRepository repo = new EducationRepository();

        // Thay thế các giá trị dưới đây bằng ID giáo dục và ID hồ sơ thực tế
        int educationId = 1;
        int profileId = 1;

        // Gọi hàm getEducationById để lấy thông tin về giáo dục từ cơ sở dữ liệu
        Education education = repo.getEducationById(educationId, profileId);

        // Kiểm tra xem có thông tin giáo dục được tìm thấy không
        if (education != null) {
            // Hiển thị thông tin giáo dục ra màn hình
            System.out.println("Education Details:");
            System.out.println("ID: " + education.getId());
            System.out.println("Degree: " + education.getDegree());
            System.out.println("Institution: " + education.getInstitution());
            System.out.println("Additional Detail: " + education.getAdditionalDetail());
            System.out.println("Start Date: " + education.getStartDate());
            System.out.println("End Date: " + education.getEndDate());
        } else {
            System.out.println("Education not found.");
        }
    }
}
