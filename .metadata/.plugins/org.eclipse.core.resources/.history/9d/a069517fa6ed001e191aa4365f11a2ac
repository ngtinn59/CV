package cit.ctu;
import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import ctu.cit.User;

public class KhachHangResponsitory {

    Connection conn = null;

    public KhachHangResponsitory() {
        String user_name = "postgres";
        String password = "123";
        try {
            Class.forName("org.postgresql.Driver");
            conn = DriverManager.getConnection("jdbc:postgresql://localhost:5432/cse", user_name, password);
            System.out.println("Ket noi thanh cong!");
        } catch (Exception e) {
            System.out.println("Kết nối đến cơ sở dữ liệu thất bại: " + e.getMessage());
        }
    }

    public void insertUser(KhachHang user) {
        String sql = "INSERT INTO khach_hang (mso, hoten, diachi, gtinh) VALUES (?, ?, ?, ?)";
        try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
          pstmt.setInt(1, user.getMso());
          pstmt.setString(2, user.getHoten());
          pstmt.setString(3, user.getDiachi());
          pstmt.setString(4, user.getGtinh());

          int rowsAffected = pstmt.executeUpdate();
          if (rowsAffected > 0) {
            System.out.println("Người dùng được thêm vào cơ sở dữ liệu thành công!");
          } else {
            System.out.println("Thêm người dùng vào cơ sở dữ liệu không thành công!");
          }
        } catch (SQLException e) {
          System.out.println("Lỗi khi thêm người dùng vào cơ sở dữ liệu: " + e.getMessage());
        }
      }
    
    
    public List<KhachHang> getAllCustomers() {
        List<KhachHang> customers = new ArrayList<>();
        String sql = "SELECT * FROM khach_hang";
        try (PreparedStatement pstmt = conn.prepareStatement(sql);
             ResultSet rs = pstmt.executeQuery()) {
            while (rs.next()) {
                KhachHang customer = new KhachHang();
                customer.setMso(rs.getInt("mso"));
                customer.setHoten(rs.getString("hoten"));
                customer.setDiachi(rs.getString("diachi"));
                customer.setGtinh(rs.getString("gtinh"));
                customers.add(customer);
            }
        } catch (SQLException e) {
            System.out.println("Lỗi khi lấy danh sách khách hàng: " + e.getMessage());
        }
        return customers;
    }
    public static void main(String[] args) {
        KhachHangResponsitory repository = new KhachHangResponsitory();

        // Specify the ID of the customer you want to delete
        int customerIdToDelete = 0; // Replace 1 with the actual customer ID you want to delete

        // Call the deleteCustomerById method to delete the customer
        repository.deleteCustomerById(customerIdToDelete);
    }
    public boolean deleteCustomerById(int customerId) {
        String sql = "DELETE FROM khach_hang WHERE mso = ?";
        try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1, customerId);

            int rowsAffected = pstmt.executeUpdate();
            if (rowsAffected > 0) {
                System.out.println("Xóa khách hàng thành công!");
                return true; // Trả về true nếu xóa then công
            } else {
                System.out.println("Không tìm thấy khách hàng để xóa!");
                return false; // Trả về false nếu không tìm thấy khách hàng để xóa
            }
        } catch (SQLException e) {
            System.out.println("Lỗi khi xóa khách hàng: " + e.getMessage());
            return false; // Trả về false nếu có lỗi xảy ra khi xóa khách hàng
        }
    }

	
    } 




